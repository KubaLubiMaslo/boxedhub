local TabWindowModule = {}

-- Initialize variables to store UI elements
TabWindowModule.tabs = {}
TabWindowModule.tabButtons = {}
TabWindowModule.tabContents = {}
TabWindowModule.currentContent = nil

-- Create the main window
function TabWindowModule:CreateWindow(parent)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BoxHubGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = parent

    local window = Instance.new("Frame")
    window.Size = UDim2.new(0, 400, 0, 300)
    window.Position = UDim2.new(0.5, -200, 0.5, -150)
    window.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    window.Parent = screenGui

    local tabList = Instance.new("Frame")
    tabList.Size = UDim2.new(0, 100, 1, 0)
    tabList.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    tabList.Parent = window

    local tabContainer = Instance.new("ScrollingFrame")
    tabContainer.Size = UDim2.new(1, 0, 1, 0)
    tabContainer.CanvasSize = UDim2.new(0, 0, 1, 0)
    tabContainer.ScrollBarThickness = 5
    tabContainer.Parent = tabList

    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -100, 1, 0)
    contentFrame.Position = UDim2.new(0, 100, 0, 0)
    contentFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    contentFrame.Parent = window

    TabWindowModule.screenGui = screenGui
    TabWindowModule.tabContainer = tabContainer
    TabWindowModule.contentFrame = contentFrame

    return window
end

-- Function to create or update a tab
function TabWindowModule:CreateOrUpdateTab(tabName)
    -- Check if tab already exists
    local tabContent = self.tabs[tabName]
    if not tabContent then
        -- Create new tab button
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(1, 0, 0, 50)
        tabButton.Text = tabName
        tabButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        tabButton.Parent = self.tabContainer

        -- Calculate position for the new tab button
        local buttonIndex = #self.tabButtons + 1
        tabButton.Position = UDim2.new(0, 0, 0, (buttonIndex - 1) * 50)
        self.tabButtons[tabName] = tabButton

        -- Create new content frame for the tab
        tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.Position = UDim2.new(0, 0, 0, 0)
        tabContent.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        tabContent.Visible = false
        tabContent.Parent = self.contentFrame
        self.tabs[tabName] = tabContent

        -- Add button functionality to switch to the selected tab
        tabButton.MouseButton1Click:Connect(function()
            if self.currentContent then
                self.currentContent.Visible = false
            end
            tabContent.Visible = true
            self.currentContent = tabContent
        end)
    end

    -- Show the first tab created by default
    if not self.currentContent then
        tabContent.Visible = true
        self.currentContent = tabContent
    end

    return tabContent
end

-- Function to add or update a toggle in a specified tab
function TabWindowModule:CreateOrUpdateToggle(tabName, toggleName, callback)
    local tabContent = self:CreateOrUpdateTab(tabName)

    -- Check if the toggle already exists
    local existingToggle = nil
    for _, child in pairs(tabContent:GetChildren()) do
        if child:IsA("TextButton") and child.Text:match("^" .. toggleName) then
            existingToggle = child
            break
        end
    end

    local toggleButton = existingToggle or Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 200, 0, 50)
    toggleButton.Position = UDim2.new(0, 10, 0, #tabContent:GetChildren() * 60)
    toggleButton.Text = toggleName .. " (OFF)"
    toggleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    toggleButton.Parent = tabContent

    local isOn = false
    toggleButton.MouseButton1Click:Connect(function()
        isOn = not isOn
        toggleButton.Text = toggleName .. (isOn and " (ON)" or " (OFF)")
        callback(isOn)
    end)

    return toggleButton
end

-- Function to destroy the window
function TabWindowModule:DestroyWindow(parent)
    for _, i in pairs(parent:GetChildren()) do
        if i.Name == "BoxHubGui" then
            i:Destroy()
        end
    end
end

return TabWindowModule
